# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
imports: (( &temporary ))
landscape: (( &temporary ))
env: (( &temporary ))

plugins:
  - kubectl: kubectl_sa
  - helm:
    - dashboard
    - spiff
  - kubectl: rbac
  - (( valid( .landscape.dashboard.cname ) ? { "kubectl" = "cname_dnsentry" } :~~ ))
  - -echo: "==================================================================="
  - -echo: (( "Dashboard URL -> " settings.dashboard_url ))
  - -echo: "==================================================================="

dashboard_version: (( &temporary ( .landscape.versions.dashboard ) ))

dashboard:
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  source: "git/repo/charts/gardener-dashboard"
  name: "dashboard"
  namespace: (( .landscape.namespace ))
  values:
    apiServerUrl: (( imports.kube_apiserver.export.apiserver_url ))
    sessionSecret: (( rand("[:alnum:]", 30) ))
    hosts:
      - (( imports.identity.export.dashboard_dns ))
      - (( .landscape.dashboard.cname.domain || ~~ ))
    image:
      repository: (( .dashboard_version.image_repo || ~~ ))
      tag: (( .dashboard_version.image_tag || ~~ ))
      pullPolicy: (( defined( tag ) -and tag != "latest" ? "IfNotPresent" :"Always" ))
    oidc:
      issuerUrl: (( imports.identity.export.issuer_url ))
      ca: (( imports.cert-controller.export.ca.crt || ~~ ))
      redirectUri: (( settings.dashboard_url "/auth/callback" ))
      clientSecret: (( imports.identity.export.dashboardClientSecret ))
    tlsSecretName: (( imports.cert.export.certificate.secret_name ))
    tls: ~
    kubeconfig: (( format( "((! read( \"%s/kubectl_sa/sa_%s.kubeconfig\" , \"text\") ))", env.GENDIR, .settings.serviceaccount_name ) ))
    podLabels:
      <<: (( ( .landscape.gardener.network-policies.active || false ) ? ~ :~~ ))
      networking.gardener.cloud/to-dns: allowed
      networking.gardener.cloud/to-garden-kube-apiserver: allowed
      networking.gardener.cloud/to-identity: allowed
      networking.gardener.cloud/to-ingress: allowed
      networking.gardener.cloud/to-world: allowed
      networking.gardener.cloud/to-inside: allowed
    gitHub: (( .landscape.dashboard.gitHub || ~~ ))
    frontendConfig:
      <<: (( .landscape.dashboard.frontendConfig || ~ ))
      seedCandidateDeterminationStrategy: (( .imports.gardener_virtual.export.gardener.seedCandidateDeterminationStrategy ))
      features:
        <<: (( .landscape.dashboard.frontendConfig.features || ~ ))
        terminalEnabled: (( ( .landscape.dashboard.terminals.active || false ) ))
    terminal: (( ( .landscape.dashboard.terminals.active || false ) ? *.terminal_config :~~ ))

terminal_config:
  <<: (( &temporary &template ))
  containerImage: eu.gcr.io/gardener-project/gardener/ops-toolbelt:0.6.0
  containerImageOperator: eu.gcr.io/gardener-project/gardener/ops-toolbelt:0.6.0
  gardenTerminalHost:
    seedRef: (( .landscape.iaas[0].name ))
  garden:
    operatorCredentials:
      secretRef:
        name: (( .imports.terminals.export.kubeconfig_secret ))
        namespace: (( .landscape.namespace ))
  bootstrap:
    disabled: false
    shootDisabled: false
    seedDisabled: false
    gardenTerminalHostDisabled: true
    apiServerIngress:
      annotations:
        certmanager.k8s.io/cluster-issuer: (( .imports.cert-controller.export.issuerName ))
        cert.gardener.cloud/purpose: managed
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/backend-protocol: HTTPS

cname_dnsentry:
  kubeconfig: (( .landscape.clusters[0].kubeconfig ))
  manifests:
    - apiVersion: dns.gardener.cloud/v1alpha1
      kind: DNSEntry
      metadata:
        annotations:
          dns.gardener.cloud/class: (( .imports.dns-controller.export.dns-class ))
        name: garden-dashboard-cname
        namespace: (( .imports.dns-controller.export.namespace ))
      spec:
        dnsName: (( .landscape.dashboard.cname.domain || ~~ ))
        targets:
        - (( .imports.identity.export.dashboard_dns ))
        ttl: 120

util:
  <<: (( &temporary ))
  userbindings: ((|users|->map[users|user|->*spec.subject] ))

settings:
  serviceaccount_name: gardener-dashboard
  dashboard_url: (( "https://" imports.identity.export.dashboard_dns ))

kubectl_sa:
  kubeconfig: (( .imports.kube_apiserver.export.kubeconfig ))
  manifests:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: (( .settings.serviceaccount_name ))
        namespace: (( .landscape.namespace ))
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: "dashboard.gardener.cloud:admin"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
        - kind: ServiceAccount
          name: (( .settings.serviceaccount_name ))
          namespace: (( .landscape.namespace ))

spec:
  <<: (( &temporary ))
  subject:
    <<: (( &template ))
    apiGroup: rbac.authorization.k8s.io
    kind: User
    name: (( user ))
  users: (( map[.landscape.identity.users|v|->v.email]))

rbac:
  kubeconfig: (( imports.kube_apiserver.export.kubeconfig ))
  manifests:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: garden.sapcloud.io:system:project-creation
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: gardener.cloud:system:project-creation
      subjects: (( util.userbindings(spec.users) ))
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        annotations:
        name: garden.sapcloud.io:system:administrators
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: gardener.cloud:system:administrators
      subjects: (( util.userbindings(["system:kube-aggregator"] spec.users) ))
