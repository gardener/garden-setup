# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
imports: (( &temporary ))
landscape: (( &temporary ))

plugins:
  - helm: dashboard
  - kubectl: rbac
  - -echo: "==================================================================="
  - -echo: (( "Dashboard URL -> " settings.dashboard_url ))
  - -echo: "==================================================================="

dashboard_version: (( &temporary ( .landscape.versions.dashboard ) ))

dashboard:
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  source: "git/repo/charts/gardener-dashboard"
  name: "dashboard"
  namespace: (( .landscape.namespace ))
  values:
    apiServerUrl: (( imports.kube_apiserver.export.apiserver_url ))
    sessionSecret: (( rand("[:alnum:]", 30) ))
    hosts:
      - (( imports.identity.export.dashboard_dns ))
    image:
      repository: (( .dashboard_version.image_repo || ~~ ))
      tag: (( .dashboard_version.image_tag || ~~ ))
      pullPolicy: (( defined( tag ) -and tag != "latest" ? "IfNotPresent" :"Always" ))
    oidc:
      issuerUrl: (( imports.identity.export.issuer_url ))
      ca: (( imports.cert-controller.export.ca.crt || ~~ ))
      redirectUri: (( settings.dashboard_url "/auth/callback" ))
      clientSecret: (( imports.identity.export.dashboardClientSecret ))
    tlsSecretName: (( imports.cert.export.certificate.secret_name ))
    tls: ~
    kubeconfig: (( asyaml(imports.kube_apiserver.export.kubeconfig) ))
    gitHub: (( .landscape.dashboard.gitHub || ~~ ))
    frontendConfig:
      <<: (( .landscape.dashboard.frontendConfig || ~ ))
      seedCandidateDeterminationStrategy: (( .imports.gardener_virtual.export.gardener.seedCandidateDeterminationStrategy ))

util:
  <<: (( &temporary ))
  userbindings: ((|users|->map[users|user|->*spec.subject] ))

settings:
  dashboard_url: (( "https://" imports.identity.export.dashboard_dns ))

spec:
  <<: (( &temporary ))
  subject:
    <<: (( &template ))
    apiGroup: rbac.authorization.k8s.io
    kind: User
    name: (( user ))
  users: (( map[.landscape.identity.users|v|->v.email]))

rbac:
  kubeconfig: (( imports.kube_apiserver.export.kubeconfig ))
  manifests:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: garden.sapcloud.io:system:project-creation
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: garden.sapcloud.io:system:project-creation
      subjects: (( util.userbindings(spec.users) ))
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        annotations:
        name: garden.sapcloud.io:system:administrators
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: garden.sapcloud.io:system:administrators
      subjects: (( util.userbindings(["system:kube-aggregator"] spec.users) ))
