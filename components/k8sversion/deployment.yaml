# Copyright 2023 Copyright (c) 2023 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
landscape: (( &temporary ))
env: (( &temporary ))

commands:
  <<: (( &temporary ))
  get_k8s_version: (( |kcfg_path|-> ("raw_version" = .commands.get_raw_version(kcfg_path)) raw_version.serverVersion.major "." raw_version.serverVersion.minor ))
  get_raw_version: (( |kcfg_path|-> exec(["kubectl", "--kubeconfig", kcfg_path, "version", "-o", "yaml"]) ))

iaasSeedsSoils: (( &temporary ( select[.landscape.iaas|elem|-> elem.mode == "seed" -or elem.mode == "soil"] ) ))

k8sVersions:
  base: (( soils[.landscape.iaas[0].name] ))
  soils: (( sum[.iaasSeedsSoils|{}|s,elem|-> s { elem.name = .commands.get_k8s_version(valid(elem.cluster.kubeconfig) ? tempfile(asyaml(elem.cluster.kubeconfig)) :join("/", env.ROOTDIR, .landscape.clusters[0].kubeconfig)) }] ))