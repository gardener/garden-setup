# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
imports: (( &temporary ))
landscape: (( &temporary ))
utilities: (( &temporary ))

plugins:
  - pinned:
    - helm:
      - identity
      - template
    - kubectl: identity

identity_version: (( &temporary ( .landscape.versions.identity ) ))

injector:
  <<: (( &temporary ))
  injectall: (( |list|->map[list|c|-> valid( c.config.redirectURI ) ? c :merge(c, _.stub)] ))
  stub:
    config:
      redirectURI: (( &inject(settings.callbackUrl) ))

spec:
  <<: (( &temporary ))

  passwords:
    input: (( landscape.identity.users ( landscape.identity.unprivilegedUsers || [] ) || [] ))
    value:
      <<: (( &template ))
      state: (( map[input|v|->{ "email"=v.email, "username"=v.username, "hash"=( v.hash || bcrypt(v.password) ) }] ))

settings:
  issuerUrl: (( .landscape.identity.issuerUrl || "https://" identity_dns "/oidc" ))
  callbackUrl: (( dashboardUrl "/oidc/callback" ))
  dashboardUrl: (( "https://" dashboard_dns ))
  identityUrl: (( "https://" identity_dns ))
  identity_dns: (( ( .landscape.identity.useIdentityDomain || false ) ? "identity." .imports.ingress-controller.export.ingress_domain :dashboard_dns ))
  dashboard_dns: (( "gardener." .imports.ingress-controller.export.ingress_domain ))

state:
  <<: (( &state(merge none) ))
  staticPasswords: (( utilities.state.standard(spec.passwords, false) ))
  dashboardClientSecret: (( utilities.certs.secret(landscape.identity.dashboardClientSecret || ~, 32, false) ))
  kubectlClientSecret: (( utilities.certs.secret(landscape.identity.kubectlClientSecret || ~, 32, false) ))

identity:
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  files:
    - "identity/rendered_charts.yaml"
  source: "git/repo/charts/identity"
  name: "identity"
  namespace: (( .landscape.namespace ))
  values:
    image:
      repository: (( .identity_version.image_repo || ~~ ))
      tag: (( .identity_version.image_tag || ~~ ))
      pullPolicy: (( defined( tag ) -and tag == "latest" ? "Always" :"IfNotPresent" ))
    dashboardClientSecret: (( .state.dashboardClientSecret.value ))
    kubectlClientSecret: (( .state.kubectlClientSecret.value ))
    dashboardOrigins:
      - (( .settings.dashboardUrl ))
    hosts:
      - (( .settings.identity_dns ))
    issuerUrl: (( .settings.issuerUrl ))
    connectors: (( injector.injectall(.landscape.identity.connectors || []) ))
    staticPasswords: (( state.staticPasswords.value ))
    tlsSecretName: (( imports.cert.export.certificate.secret_name ))
    tls: ~
