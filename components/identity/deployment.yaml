# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
imports: (( &temporary ))
landscape: (( &temporary ))
utilities: (( &temporary ))

plugins:
  - git: identity_git
  - helm: identity

identity_git:
  <<: (( .landscape.versions.identity ))
  files:
    - "charts"

injector:
  <<: (( &temporary ))
  injectall: (( |list|->map[list|c|->merge(c, _.stub)] ))
  stub:
    config:
      redirectURI: (( &inject(settings.callbackUrl) ))

spec:
  <<: (( &temporary ))

  server:
    commonName: "identity"
    validity: 87600
    usage:
      - ServerAuth
      - ClientAuth
      - KeyEncipherment
    hosts:
      - localhost
      - "127.0.0.1"
      - <<: (( utilities.svcHosts("identity-service",landscape.namespace) ))
      - (( .settings.identity_dns ))
      - (( .settings.dashboard_dns ))

  passwords:
    input: (( landscape.identity.users || [] ))
    value:
      <<: (( &template ))
      state: (( map[input|v|->{ "email"=v.email, "username"=v.username, "hash"=( v.hash || bcrypt(v.password) ) }] ))

settings:
  issuerUrl: (( .landscape.identity.issuerUrl || "https://" dashboard_dns "/oidc" ))
  callbackUrl: (( issuerUrl "/callback" ))
  dashboardUrl: (( "https://" dashboard_dns ))
  identity_dns: (( "identity." .imports.ingress_dns.export.ingress_domain ))
  dashboard_dns: (( "gardener." .imports.ingress_dns.export.ingress_domain ))

state:
  <<: (( &state(merge none) ))
  ca: (( utilities.certs.selfSignedCA("identity:ca", false) ))
  server: (( utilities.certs.keyCertForCA(spec.server, ca, false) ))
  staticPasswords: (( utilities.state.standard(spec.passwords, false) ))
  dashboardClientSecret: (( utilities.certs.secret(landscape.identity.dashboardClientSecret || ~, 32, false) ))
  kubectlClientSecret: (( utilities.certs.secret(landscape.identity.kubectlClientSecret || ~, 32, false) ))

identity:
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  source: "identity_git/repo/charts/identity"
  name: "identity"
  namespace: (( .landscape.namespace ))
  values:
    image:
      repository: (( .identity_git.image_repo || ~~ ))
      tag: (( .identity_git.image_tag || ~~ ))
      pullPolicy: (( defined( tag ) -and tag == "latest" ? "Always" :"IfNotPresent" ))
    dashboardClientSecret: (( .state.dashboardClientSecret.value ))
    kubectlClientSecret: (( .state.kubectlClientSecret.value ))
    dashboardOrigins:
      - (( .settings.dashboardUrl ))
    hosts:
      - (( .settings.dashboard_dns ))
    issuerUrl: (( .settings.issuerUrl ))
    connectors: (( injector.injectall(.landscape.identity.connectors || []) ))
    staticPasswords: (( state.staticPasswords.value ))
    tls:
      crt: (( .state.server.value.cert ))
      key: (( .state.server.value.key ))

