---
imports: (( &temporary ))
landscape: (( &temporary ))
utilities: (( &temporary ))

settings:
  namespace: cert-manager # will be created - don't choose an existing one!
  self-signed: (( .caSpec.url == "self-signed" ))
  issuerName: (( .settings.self-signed ? "ca-issuer" :"acme-issuer" ))
  issuerPrivateKey: (( .settings.self-signed -or (! valid( .landscape.cert-manager.privateKey ) ) ? ~ :.landscape.cert-manager.privateKey ))
  issuerEABSecretName: "acme-issuer-eab"
  caSecret: "self-signed-ca"
  certClass: "garden-setup"
  ca:
    given: (( &temporary ( valid( .caSpec.ca.crt ) -and ( ( ! .settings.self-signed ) -or valid( .caSpec.ca.key ) ) ) )) # a given CA needs crt and key for self-signed mode
    crt: (( given ? .caSpec.ca.crt :( .state.ca.value.cert || ~~ ) ))
    key: (( given ? ( .caSpec.ca.key || ~~ ) :( .state.ca.value.key || ~~ ) ))

caSpec:
  <<: (( &temporary ))
  instantiateIfNeeded: (( |x|-> type( x ) == "template" ? *x :x ))
  server: (( caSpec.instantiateIfNeeded( .servers[.landscape.cert-manager.server.url] || .landscape.cert-manager.server ) ))
  url: (( server.url || server ))
  eab: (( server.eab || ~~ ))
  ca: (( server.ca || ~~ ))

plugins:
  - kubectl: namespace
  - pinned:
    - helm:
      - helm
      - template
    - kubectl: helm
  - kubectl: issuer
  - -echo: (( .settings.self-signed ? ( .settings.ca.given ? "Using provided CA" :"Using self-signed CA" ) :"Using ACME server at " .caSpec.url ))

namespace:
  name: (( settings.namespace ))
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  manifests:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: (( .namespace.name ))

issuer: (( .settings.self-signed ? *ca_issuer :*acme_issuer ))

issuer-secret:
  - <<: (( &template &temporary ))
  - apiVersion: v1
    kind: Secret
    type: Opaque
    metadata:
      name: (( settings.issuerName "-secret" ))
      namespace: (( .settings.namespace ))
    data:
      privateKey: (( base64(settings.issuerPrivateKey) ))

eab:
  <<: (( &template &temporary ))
  issuerSnippet:
    keyID: (( .caSpec.eab.keyID ))
    keySecretRef:
      name: (( .settings.issuerEABSecretName ))
      namespace: (( .settings.namespace ))
  manifests:
  - apiVersion: v1
    kind: Secret
    type: Opaque
    metadata:
      name: (( .settings.issuerEABSecretName ))
      namespace: (( .settings.namespace ))
    data:
      hmacKey: (( base64(.caSpec.eab.keySecret) ))

acme_issuer:
  <<: (( &template &temporary ))
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  manifests:
    - <<: (( valid( .settings.issuerPrivateKey ) ? *issuer-secret :~ ))
    - <<: (( valid( .caSpec.eab ) ? *eab.manifests :~ ))
    - apiVersion: cert.gardener.cloud/v1alpha1
      kind: Issuer
      metadata:
        name: (( .settings.issuerName ))
        namespace: (( .settings.namespace ))
      spec:
        acme:
          server: (( .caSpec.url ))
          email: (( .landscape.cert-manager.email || .landscape.identity.users[0].email ))
          autoRegistration: (( ! valid( .settings.issuerPrivateKey ) ))
          privateKeySecretRef:
            name: (( .settings.issuerName "-secret" ))
            namespace: (( .settings.namespace ))
          externalAccountBinding: (( valid( .caSpec.eab ) ? *eab.issuerSnippet :~~ ))

ca_issuer:
  <<: (( &template &temporary ))
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  manifests:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: (( .settings.caSecret ))
        namespace: (( .settings.namespace ))
      type: kubernetes.io/tls
      data:
        tls.crt: (( base64( .settings.ca.crt ) ))
        tls.key: (( base64( .settings.ca.key ) ))
    - apiVersion: cert.gardener.cloud/v1alpha1
      kind: Issuer
      metadata:
        name: (( .settings.issuerName ))
        namespace: (( .settings.namespace ))
      spec:
        ca:
          privateKeySecretRef:
            name: (( .settings.caSecret ))
            namespace: (( .settings.namespace ))


servers:
  <<: (( &temporary ))
  live: https://acme-v02.api.letsencrypt.org/directory
  staging:
    <<: (( &template )) # to not download the letsencrypt certs every time
    url: https://acme-staging-v02.api.letsencrypt.org/directory
    ca:
      crt: (( exec( "curl", "-s", "https://letsencrypt.org/certs/fakelerootx1.pem" ) "\n" exec( "curl", "-s", "https://letsencrypt.org/certs/fakeleintermediatex1.pem" ) ))

helm:
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  files:
    - "helm/rendered_charts.yaml"
  source: "git/repo/charts/cert-management"
  name: cert-manager
  namespace: (( .namespace.name ))
  flags:
    deploy: (( "--kube-version=" .imports.k8sversion.export.k8sVersions.base ))
  values:
    image:
      repository: (( .landscape.versions.cert-manager.controller.image_repo || ~~ ))
      tag: (( .landscape.versions.cert-manager.controller.image_tag || ~~ ))
    createCRDs:
      issuers: true
      certificates: true
    configuration:
      dnsClass: (( .imports.dns-controller.export.dns-class ))
      dnsNamespace: (( .settings.namespace ))
      certClass: (( .settings.certClass ))
      defaultIssuer: (( .settings.issuerName ))
      issuerNamespace: (( .settings.namespace ))

state:
  <<: (( &state(merge none) ))
  ca: (( .settings.self-signed -and ( ! .settings.ca.given ) ? ( utilities.certs.selfSignedCA("self-signed-ca", false) ) :~~ ))