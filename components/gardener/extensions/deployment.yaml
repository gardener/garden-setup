---
imports: (( &temporary ))
landscape: (( &temporary ))
env: (( &temporary ))
utilities: (( &temporary ))

plugins:
  - kubectl
  - (( ( length(.admissionControllers) > 0 ) -and ( .landscape.gardener.network-policies.active == true ) ? { "kubectl" = "kubectl_admission_netpols" } :~~ )) # network policies for admission controllers
  - <<: (( length(.admissionControllers) > 0 ? sum[.admissionControllers|[]|s,n|-> s *.admission.plugin_template] :~ )) # admission controllers
  - shoot-check

shoot-check:
  kubeconfig: (( imports.kube_apiserver.export.kubeconfig ))

# list of extensions/admissionControllers taken from component.yaml (deployment.extensions)
extensions: (( &temporary ))
admissionControllers: (( &temporary ))

# instantiated manifest templates
rendered_extension_manifests: (( &temporary( sum[extensions|{}|s,n|-> s { n = *.spec_template }] ) ))

# auxiliary functions
extension_controllers_func:
  <<: (( &temporary ))
  ignore:
    - .git
  _joinPath: (( |p,c|-> p == "" ? c :(p "/" c) ))
  files: (( |d,p|->map[list_files(_._joinPath(d,p))|v|->contains(_.ignore, v) ? ~ :_._joinPath( p, v )] sum[map[list_dirs(d "/" p)|d|-> contains(_.ignore,d) ? ~ :d]|[]|s,v|->s _.files(d,_._joinPath(p, v))] ))
  chartConfig: (( |path,dir|-> archive( sum[extension_controllers_func.files( path, dir )|{}|s,e|->s { e = { "data" = read( path "/" e, "text" ) } }], "targz" ) ))

kubectl:
  kubeconfig: (( imports.kube_apiserver.export.kubeconfig ))
  manifests: (( sum[rendered_extension_manifests.[*].manifests|[]|s,e|->s e.[*]] ))

kubectl_admission_netpols:
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  manifests: (( sum[.admissionControllers|[]|s,n|-> s *.admission.netpol_template] ))

# this template gets evaluated for each entry in extension_manifests
spec_template:
  <<: (( &temporary &template ))
  version: (( &temporary( .landscape.versions.gardener.extensions[n] ) ))
  valuesOverwrite: (( &temporary( valid(.landscape.gardener.extensions[n].valueOverwrites) ? .landscape.gardener.extensions[n].valueOverwrites :~ ) ))
  manifests: (( manifest_templates.render_manifest_template( *.extension_specs[n] ) ))
  encoded_chart: (( &temporary( .extension_controllers_func.chartConfig( paths.prefix, paths.suffix ) ) ))
  paths:
    <<: (( &temporary ))
    raw: (( env.GENDIR "/extensions." n "/repo/" version.chart_path ))
    pos: (( lastindex( raw, "/" ) ))
    prefix: (( substr( raw, 0, pos ) ))
    suffix: (( substr( raw, pos + 1 ) ))

manifest_templates:
  <<: (( &temporary ))
  render_manifest_template: (( |data|-> [ *_.deployment, *_.registration ] ))
  deployment:
    <<: (( &template ))
    apiVersion: core.gardener.cloud/v1beta1
    kind: ControllerDeployment
    metadata:
      name: (( data.extensionName ))
    type: (( data.type ))
    providerConfig: (( data.providerConfig ))
  registration:
    <<: (( &template ))
    apiVersion: core.gardener.cloud/v1beta1
    kind: ControllerRegistration
    metadata:
      name: (( data.extensionName ))
    spec:
      deployment:
        deploymentRefs:
        - name: (( data.extensionName ))
        policy: OnDemand
      resources: (( data.resources ))

state:
  <<: (( &state(merge none) ))
  admissionCertificates: (( sum[.admissionControllers|{}|s,n|-> s { n = *.admission.cert_data.state_template }] ))

rendered_admission_templates:
  helm_virtual: (( sum[.admissionControllers|{}|s,n|-> s { n = *admission.helm_template_virtual }] ))
  kubectl_virtual: (( sum[.admissionControllers|{}|s,n|-> s { n = *admission.kubectl_template_virtual }] ))
  helm_runtime: (( sum[.admissionControllers|{}|s,n|-> s { n = *admission.helm_template_runtime }] ))

# stuff required for the extension admission controllers
admission:
  <<: (( &temporary ))

  fullName: (( |n|-> .landscape.versions.gardener.extensions[n].admission_controller_name ))

  # virtual cluster deployment
  helm_template_virtual:
    <<: (( &template ))
    kubeconfig: (( .imports.kube_apiserver.export.kubeconfig ))
    source: (( "extensions." n "/repo/charts/" name "/charts/application" ))
    name: (( admission.fullName(n) ))
    namespace: (( .landscape.namespace ))
    values: (( *admission.values_template ))
  helm_template_runtime:
    <<: (( &template ))
    kubeconfig: (( .landscape.clusters.[0].kubeconfig ))
    source: (( "extensions." n "/repo/charts/" name "/charts/runtime" ))
    name: (( admission.fullName(n) ))
    namespace: (( .landscape.namespace ))
    values: (( *admission.values_template ))
  kubectl_template_virtual:
    <<: (( &template ))
    kubeconfig: (( .imports.kube_apiserver.export.kubeconfig ))
    files:
      - (( "rendered_admission_templates.helm_virtual." n "/rendered_charts.yaml" ))
  plugin_template:
    - <<: (( &template ))
    - pinned:
      - helm:
        - (( "rendered_admission_templates.helm_virtual." n ))
        - template
      - kubectl: (( "rendered_admission_templates.kubectl_virtual." n ))
    - helm: (( "rendered_admission_templates.helm_runtime." n ))

  # certificate stuff
  cert_data:
    <<: (( &temporary ))
    server:
      <<: (( &template ))
      commonName: (( admission.fullName(n) ".garden.svc.cluster.local" ))
      validity: 87600
      usage:
        - ServerAuth
        - Signature
        - KeyEncipherment
      hosts:
        - (( admission.fullName(n) ))
        - (( admission.fullName(n) ".garden" ))
        - (( admission.fullName(n) ".garden.svc" ))
        - (( admission.fullName(n) ".garden.svc.cluster" ))
        - (( admission.fullName(n) ".garden.svc.cluster.local" ))
      
    state_template:
      <<: (( &template ))
      ca: (( utilities.certs.selfSignedCA(admission.fullName(n), false) ))
      server: (( utilities.certs.keyCertForCA(*.admission.cert_data.server, ca, false) ))

  # admission controller values template
  values_template:
    <<: (( &template ))
    global:
      virtualGarden:
        enabled: true
      kubeconfig: (( asyaml( .imports.kube_apiserver.export.kubeconfig ) ))
      image:
        repository: (( .landscape.versions.gardener.extensions[n].image_repo || ~~ ))
        tag: (( .landscape.versions.gardener.extensions[n].image_tag || ~~ ))
      replicaCount: 3
      webhookConfig:
        caBundle: (( .state.admissionCertificates[n].ca.value.cert ))
        tls:
          crt: (( .state.admissionCertificates[n].server.value.cert ))
          key: (( .state.admissionCertificates[n].server.value.key ))

  netpol_template:
    <<: (( &template ))
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: (( "to-" n "-admission-controller" ))
      namespace: (( .landscape.namespace ))
    spec:
      podSelector:
        matchLabels:
          networking.gardener.cloud/to-gardener-extension-admission-controllers: allowed
      policyTypes:
      - Egress
      egress:
      - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: (( admission.fullName(n) ))

extension_specs:
  <<: (( &temporary ))

########################################
  os-coreos:
########################################
    <<: (( &template ))
    extensionName: os-coreos
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        concurrentSyncs: 25
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 20m
            memory: 64Mi
    resources:
      - kind: OperatingSystemConfig
        type: coreos
        primary: true

########################################
  os-ubuntu:
########################################
    <<: (( &template ))
    extensionName: os-ubuntu
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        concurrentSyncs: 25
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 20m
            memory: 64Mi
    resources:
      - kind: OperatingSystemConfig
        type: ubuntu
        primary: true

########################################
  os-gardenlinux:
########################################
    <<: (( &template ))
    extensionName: os-gardenlinux
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        concurrentSyncs: 25
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            cpu: 300m
            memory: 512Mi
          requests:
            cpu: 20m
            memory: 128Mi
    resources:
    - kind: OperatingSystemConfig
      type: gardenlinux
      primary: true

########################################
  os-suse-chost:
########################################
    <<: (( &template ))
    extensionName: os-suse-chost
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        concurrentSyncs: 20
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 20m
            memory: 64Mi
    resources:
    - kind: OperatingSystemConfig
      type: suse-chost
      primary: true

########################################
  provider-aws:
########################################
    <<: (( &template ))
    extensionName: provider-aws
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            memory: 1Gi
    resources:
    - kind: Infrastructure
      type: aws
      primary: true
    - kind: ControlPlane
      type: aws
      primary: true
    - kind: Worker
      type: aws
      primary: true
    - kind: BackupBucket
      type: aws
      primary: true
    - kind: BackupEntry
      type: aws
      primary: true
    - kind: DNSRecord
      type: aws-route53
      primary: true



########################################
  provider-alicloud:
########################################
    <<: (( &template ))
    extensionName: provider-alicloud
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            memory: 1Gi
    resources:
    - kind: Infrastructure
      type: alicloud
      primary: true
    - kind: ControlPlane
      type: alicloud
      primary: true
    - kind: Worker
      type: alicloud
      primary: true
    - kind: BackupBucket
      type: alicloud
      primary: true
    - kind: BackupEntry
      type: alicloud
      primary: true
    - kind: DNSRecord
      type: alicloud-dns
      primary: true



########################################
  provider-azure:
########################################
    <<: (( &template ))
    extensionName: provider-azure
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            memory: 1Gi
    resources:
    - kind: Infrastructure
      type: azure
      primary: true
    - kind: ControlPlane
      type: azure
      primary: true
    - kind: Worker
      type: azure
      primary: true
    - kind: BackupBucket
      type: azure
      primary: true
    - kind: BackupEntry
      type: azure
      primary: true
    - kind: DNSRecord
      type: azure-dns
      primary: true

########################################
  provider-gcp:
########################################
    <<: (( &template ))
    extensionName: provider-gcp
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            memory: 1Gi
    resources:
    - kind: Infrastructure
      type: gcp
      primary: true
    - kind: ControlPlane
      type: gcp
      primary: true
    - kind: Worker
      type: gcp
      primary: true
    - kind: BackupBucket
      type: gcp
      primary: true
    - kind: BackupEntry
      type: gcp
      primary: true
    - kind: DNSRecord
      type: google-clouddns
      primary: true

########################################
  provider-openstack:
########################################
    <<: (( &template ))
    extensionName: provider-openstack
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        controllers:
          infrastructure:
            concurrentSyncs: 50
            ignoreOperationAnnotation: false
          worker:
            concurrentSyncs: 50
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            memory: 1Gi
    resources:
    - kind: Infrastructure
      type: openstack
      primary: true
    - kind: ControlPlane
      type: openstack
      primary: true
    - kind: Worker
      type: openstack
      primary: true
    - kind: BackupBucket
      type: openstack
      primary: true
    - kind: BackupEntry
      type: openstack
      primary: true
    - kind: DNSRecord
      type: openstack-designate
      primary: true

########################################
  provider-vsphere:
########################################
    <<: (( &template ))
    extensionName: provider-vsphere
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        config:
          etcd:
            storage:
              capacity: 25Gi
        controllers:
          controlplane:
            concurrentSyncs: 50
          infrastructure:
            concurrentSyncs: 50
          worker:
            concurrentSyncs: 50
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            memory: 1Gi
    resources:
    - kind: Infrastructure
      type: vsphere
      primary: true
    - kind: ControlPlane
      type: vsphere
      primary: true
    - kind: Worker
      type: vsphere
      primary: true

########################################
  networking-calico:
########################################
    <<: (( &template ))
    extensionName: networking-calico
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
    resources:
    - kind: Network
      type: calico
      primary: true

########################################
  shoot-cert-service:
########################################
    <<: (( &template ))
    extensionName: shoot-cert-service
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        certificateConfig:
          defaultIssuer:
            name: garden
            acme:
              email: (( valid( landscape.dashboard.terminals.cert.email ) ? landscape.dashboard.terminals.cert.email :( landscape.cert-manager.email || landscape.identity.users[0].email ) ))
              server: (( valid( landscape.dashboard.terminals.cert.server ) ? landscape.dashboard.terminals.cert.server :( landscape.cert-manager.server.url == "live" ? "https://acme-v02.api.letsencrypt.org/directory" :landscape.cert-manager.server.url ) ))
              privateKey: (( ( valid( landscape.dashboard.terminals.cert.privateKey ) ? landscape.dashboard.terminals.cert.privateKey :( ! valid( landscape.dashboard.terminals.cert.server ) ? landscape.cert-manager.privateKey :~~ ) ) || ~~ ))
              propagationTimeout: (( .landscape.defaultTTL "s" ))
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
    resources:
    - kind: Extension
      type: shoot-cert-service
      globallyEnabled: true
      primary: true

########################################
  shoot-dns-service:
########################################
    <<: (( &template ))
    extensionName: shoot-dns-service
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        dnsControllerManager:
          image:
            repository: (( version.dns-controller-manager.image_repo || ~~ ))
            tag: (( version.dns-controller-manager.image_tag || ~~ ))
          configuration:
            cacheTtl: 300
            controllers: dnscontrollers
            dnsPoolResyncPeriod: 30m
            serverPortHttp: 8080
          createCRDs: false
          deploy: true
          replicaCount: 1
        dnsProviderManagement:
          enabled: true
    resources:
    - kind: Extension
      type: shoot-dns-service
      globallyEnabled: true
      primary: true

########################################
  runtime-gvisor:
########################################
    <<: (( &template ))
    extensionName: runtime-gvisor
    type: helm
    providerConfig:
      chart: (( encoded_chart ))
      values:
        <<: (( valuesOverwrite ))
        concurrentSyncs: 25
        image:
          repository: (( version.image_repo || ~~ ))
          tag: (( version.image_tag || ~~ ))
        resources:
          limits:
            cpu: 300m
            memory: 700Mi
          requests:
            cpu: 30m
            memory: 256Mi
    resources:
    - kind: ContainerRuntime
      type: gvisor
      primary: true
