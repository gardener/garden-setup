# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
imports: (( &temporary ))
landscape: (( &temporary ))
utilities: (( &temporary ))

spec:
  <<: (( &temporary ))
  kubeconfig: (( imports.kube_apiserver.export.kubeconfig ))

  apiserver:
    username: (( imports.gardener_virtual.export.gardener.values.global.apiserver.serviceAccountName ))
    secret: (( utilities.kubectl.getField(kubeconfig, "sa", username, "{.secrets[0].name}") ))
    token: (( base64_decode( utilities.kubectl.getField(kubeconfig, "secret", secret, "{.data.token}")) ))
    apiServerUrl: (( imports.kube_apiserver.export.apiserver_url_internal ))
    cacert: (( imports.kube_apiserver.export.kube_apiserver_ca.cert ))

  controller:
    username: (( imports.gardener_virtual.export.gardener.values.global.controller.serviceAccountName ))
    secret: (( utilities.kubectl.getField(kubeconfig, "sa", username, "{.secrets[0].name}") ))
    token: (( base64_decode( utilities.kubectl.getField(kubeconfig, "secret", secret, "{.data.token}")) ))
    apiServerUrl: (( imports.kube_apiserver.export.apiserver_url_internal ))
    cacert: (( imports.kube_apiserver.export.kube_apiserver_ca.cert ))

  admission:
    username: (( imports.gardener_virtual.export.gardener.values.global.admission.serviceAccountName ))
    secret: (( utilities.kubectl.getField(kubeconfig, "sa", username, "{.secrets[0].name}") ))
    token: (( base64_decode( utilities.kubectl.getField(kubeconfig, "secret", secret, "{.data.token}")) ))
    apiServerUrl: (( imports.kube_apiserver.export.apiserver_url_internal ))
    cacert: (( imports.kube_apiserver.export.kube_apiserver_ca.cert ))

  scheduler:
    username: (( imports.gardener_virtual.export.gardener.values.global.scheduler.serviceAccountName ))
    secret: (( utilities.kubectl.getField(kubeconfig, "sa", username, "{.secrets[0].name}") ))
    token: (( base64_decode( utilities.kubectl.getField(kubeconfig, "secret", secret, "{.data.token}")) ))
    apiServerUrl: (( imports.kube_apiserver.export.apiserver_url_internal ))
    cacert: (( imports.kube_apiserver.export.kube_apiserver_ca.cert ))

kubeconfigs:
  apiserver: (( utilities.kubectl.kubeconfig(spec.apiserver) ))
  controller: (( utilities.kubectl.kubeconfig(spec.controller) ))
  admission: (( utilities.kubectl.kubeconfig(spec.admission) ))
  scheduler: (( utilities.kubectl.kubeconfig(spec.scheduler) ))

plugins:
  - pinned:
    - helm:
      - gardener
      - template
    - kubectl: gardener
  - gardenready
  - shoot-check

shoot-check:
  kubeconfig: (( imports.kube_apiserver.export.kubeconfig ))

gardenready:
  kubeconfig: (( imports.kube_apiserver.export.kubeconfig ))

gardener:
  <<: (( imports.gardener_virtual.export.gardener ))
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  files:
    - "gardener/rendered_charts.yaml"
  source: "git/repo/charts/gardener/controlplane/charts/runtime"
  values: (( merge(.imports.gardener_virtual.export.gardener.values, spec) ))
  name: gardener
  namespace: (( landscape.namespace ))
  flags:
    deploy: (( "--kube-version=" .imports.k8sversion.export.k8sVersions.base ))
  spec:
    global:
      apiserver:
        kubeconfig: (( asjson(.kubeconfigs.apiserver) ))
      controller:
        kubeconfig: (( asjson(.kubeconfigs.controller) ))
      admission:
        kubeconfig: (( asjson(.kubeconfigs.admission) ))
      scheduler:
        kubeconfig: (( asjson(.kubeconfigs.scheduler) ))
