# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
landscape: (( &temporary ))
imports: (( &temporary ))
utilities: (( &temporary ))
env: (( &temporary ))

plugins:
  - <<: (( sum[.landscape.iaas_shooted_seeds|[]|s,id,v|-> s *.pluginTemplate] ))

pluginTemplate:
  - <<: (( &temporary &template ))
  - kubectl: (( "renderedPluginSpecs[" id "].deploySecrets" ))
  - (( valid( renderedPluginSpecs[id].namespace ) ? { "kubectl" = "renderedPluginSpecs[" id "].namespace" } :~~ ))
  - pinned:
    - helm:
      - (( "renderedPluginSpecs[" id "].gardenlet" ))
      - template
    - kubectl: (( "renderedPluginSpecs[" id "].gardenlet" ))
  - seed-ready: (( "renderedPluginSpecs[" id "].seedReady" ))
  - parallel:
    - pinned:
      - wait: wait15
      - delete_controllerinstallations_belonging_to_seed: (( "renderedPluginSpecs[" id "].deleteControllerInstallationWorkaround" ))
    - delete: (( "renderedPluginSpecs[" id "].deleteSeed" ))
  - delete: (( "renderedPluginSpecs[" id "].deleteBootstrapToken" ))

wait15:
  step: delete
  seconds: 15

bootstrapTokens: (( sum[.landscape.iaas_shooted_seeds|{}|s,elem|-> s { elem.name = { "id" = rand( "a-z", 1 ) rand( "a-z0-9", 5 ), "secret" = rand( "a-z", 1 ) rand( "a-z0-9", 15 ) } }] ))

renderedPluginSpecs: (( sum[.landscape.iaas_shooted_seeds|[]|s,id,v|-> s [ ( "configValues" = *providerconfig ) read( __ctx.DIR "/../manifests/seed_manifests.yaml", "yaml" ).pluginSpecs ]] ))

providerconfig:
  <<: (( &template &temporary ))
  name: (( v.name ))
  namespace: (( landscape.namespace ))
  dns:
    type: (( landscape.dns.type ))
  iaas: (( read(__ctx.DIR "/../provider/" v.type "/seed.yaml", "import") ))
  config: (( v ))
  isBaseCluster: false
  bootstrapToken: (( bootstrapTokens[v.name] ))
  imageVectorOverwrites:
    imageVectorOverwrite: (( v.imageVectorOverwrite || ~~ ))
    componentImageVectorOverwrite: (( valid( v.componentImageVectorOverwrite ) ? { "components" = sum[v.componentImageVectorOverwrite.components|[]|cs,celem|-> s { "name" = celem.name, "imageVectorOverwrite" = asyaml( celem.imageVectorOverwrite ) }] } :~~ ))
  kubeconfigs:
    virtual: (( .imports.kube_apiserver.export.kubeconfig ))
    seed: (( .imports.shoots.export.shoots[v.name].kubeconfig ))
  seed:
    ingressdomain: (( "ingress." name "." .landscape.domain ))
    networks: (( {"nodes" = v.cluster.networks.nodes, "pods" = v.cluster.networks.pods, "services" = v.cluster.networks.services} ))
    shootDefaultNetworks: (( v.shootDefaultNetworks || ~~ ))
  secretname: (( name "-" v.mode ))
