# GARDENER_PREFIX: (default "test") use a a unique identifier for dns and gardener name

# BASE_CLOUDPROVIDER: cloudprovider for the base cluster

# Specify the deployed gardener version by using the GARDENER_VERSION or GARDENER_IMAGE_TAG and GARDENER_COMMIT
# GARDENER_VERSION: use a specific gardener version/tag

# GARDENER_IMAGE_TAG: gardener apiserver, controllermanager and scheduler version
# GARDENER_COMMIT: use a specific gardener commit


gcp-credentials:
  serviceaccount.json: (( read( "./gcloud.json", "text" ) ))

aws-credentials:
  accessKeyID: (( env( "ACCESS_KEY_ID" ) ))
  secretAccessKey: (( env( "SECRET_ACCESS_KEY_ID" ) ))

azure-credentials:
  clientID: (( env( "AZ_CLIENT_ID" ) ))
  clientSecret: (( env( "AZ_CLIENT_SECRET" ) ))
  subscriptionID: (( env( "AZ_SUBSCRIPTION_ID" ) ))
  tenantID: (( env( "AZ_TENANT_ID" ) ))

k8sVersions:
  kubernetes:
    offeredVersions:
    - version: (( env( "K8S_VERSION" ) || "1.14.3" ))

monitoring-credentials:
  username: (( env( "MONITORING_USERNAME" ) || ~~ ))
  password: (( env( "MONITORING_PASSWORD" ) || ~~ ))

base_cluster_configs:
  gcp:
    type: gcp
    region: europe-west1
    zones:
      - (( region "-b"))
      - (( region "-c"))
      - (( region "-d"))
    credentials:
      <<: (( .gcp-credentials ))
    profile:
      gcp:
        constraints:
          <<: (( .k8sVersions ))
  aws:
    type: aws
    region: eu-west-1
    zones:
      - (( region "a"))
      - (( region "b"))
      - (( region "c"))
    credentials:
      <<: (( .aws-credentials ))
    profile:
      aws:
        constraints:
          <<: (( .k8sVersions ))
  azure:
    type: azure
    region: westeurope
    credentials:
      <<: (( .azure-credentials ))
    profile:
      azure:
        constraints:
          <<: (( .k8sVersions ))


############################################################################


meta:
  installationHandler:
    path: crop/bin/installation-handler
    config:
      kubeconfig: ./kubeconfig
      namespace: garden-setup-state
      # backupLocation: (( env( "ROOT" ) ))

landscape:
  name: (( ( env( "GARDENER_PREFIX" ) || "test" ) "-gardener-oq" ))

  versions:
    gardener:
      apiserver:
        image_tag: (( env( "GARDENER_VERSION" ) || env( "GARDENER_IMAGE_TAG" ) || read( __ctx.DIR "/crop/GARDENER_VERSION", "text" ) ))
      controller_manager:
        image_tag: (( env( "GARDENER_VERSION" ) || env( "GARDENER_IMAGE_TAG" ) || read( __ctx.DIR "/crop/GARDENER_VERSION", "text" ) ))
      scheduler:
        image_tag: (( env( "GARDENER_VERSION" ) || env( "GARDENER_IMAGE_TAG" ) || read( __ctx.DIR "/crop/GARDENER_VERSION", "text" ) ))
      tag: (( defined( commit ) ? ~~ :( env( "GARDENER_VERSION" ) || read( __ctx.DIR "/crop/GARDENER_VERSION", "text" ) ) ))
      commit: (( env( "GARDENER_COMMIT" ) || ~~ ))

  domain: (( ( env( "GARDENER_PREFIX" ) || "test" ) ".oq.gcp.dev.k8s.ondemand.com" ))

  cluster:
    networks:
      nodes: 10.132.0.0/16
      pods: 10.28.0.0/15
      services: 10.31.240.0/20

  iaas:
  - name: base
    mode: seed
    <<: (( .base_cluster_configs[env( "BASE_CLOUDPROVIDER" )] || .base_cluster_configs.gcp ))
  - name: gcp
    mode: cloudprofile
    type: gcp
    region: europe-west1
    zones:
      - (( region "-b"))
      - (( region "-c"))
      - (( region "-d"))
    credentials:
      <<: (( .gcp-credentials ))
    profile:
      gcp:
        constraints:
          <<: (( .k8sVersions ))
  - name: aws
    mode: cloudprofile
    type: aws
    region: eu-west-1
    zones:
      - (( region "a"))
      - (( region "b"))
      - (( region "c"))
    credentials:
      <<: (( .aws-credentials ))
    profile:
      aws:
        constraints:
          <<: (( .k8sVersions ))
  - name: azure
    mode: cloudprofile
    type: azure
    region: westeurope
    credentials:
      <<: (( .azure-credentials ))
    profile:
      azure:
        constraints:
          <<: (( .k8sVersions ))

  monitoring:
    active: true
    <<: (( .monitoring-credentials ))

  dns:
    type: google-clouddns
    credentials: (( .gcp-credentials ))

  etcd:
    backup:
      resourceGroup: (( .landscape.name ))

  identity:
    users:
      - email: "admin@example.com"
        username: "example"
        password: (( rand("A-Z", 10) ))

