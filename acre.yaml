# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

landscape:
  name: (( error("landscape name required") ))
  domain:
  namespace: garden
  cluster:
    kubeconfig: ./kubeconfig
    networks: ~
  clusters: (( valid(landscape.cluster.networks) ? [ landscape.cluster ] :error("no cluster networks definition found") ))
  components: []
  versions:
    kube-apiserver:
      image_repo: k8s.gcr.io/hyperkube
      image_tag: v1.14.3
    etcd:
      etcd:
        image_repo: quay.io/coreos/etcd
        image_tag: "v3.3.13"
      backup_restore:
        image_repo: eu.gcr.io/gardener-project/gardener/etcdbrctl
        image_tag: "0.6.4"
    gardener:
      <<: (( merge ))
      repo: "https://github.com/gardener/gardener.git"
      tag: (( valid( branch ) -or valid( commit ) ? ~~ :read( __ctx.DIR "/GARDENER_VERSION", "text" ) ))
      apiserver:
        <<: (( merge ))
        image_repo: "eu.gcr.io/gardener-project/gardener/apiserver"
        image_tag: (( valid( tag ) ? tag :~~ ))
      controller_manager:
        <<: (( merge ))
        image_repo: "eu.gcr.io/gardener-project/gardener/controller-manager"
        image_tag: (( valid( tag ) ? tag :~~ ))
      scheduler:
        <<: (( merge ))
        image_repo: "eu.gcr.io/gardener-project/gardener/scheduler"
        image_tag: (( valid( tag ) ? tag :~~ ))
      extensions:
        dns-external:
          <<: (( merge ))
          tag: (( valid( dns-external.branch ) -or valid( dns-external.commit ) ? ~~ :( .landscape.versions.dns-controller.tag || "0.6.3" ) ))
          image_tag: (( valid( dns-external.tag ) ? dns-external.tag :~~ ))
          image_repo: (( ~~ ))
          repo: https://github.com/gardener/external-dns-management.git
          chart_path: charts/external-dns-management
        os-coreos:
          <<: (( merge ))
          tag: (( valid( os-coreos.branch ) -or valid( os-coreos.commit ) ? ~~ :"0.10.0" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/os-coreos/charts/os-coreos
          image_tag: (( valid( os-coreos.tag ) ? os-coreos.tag :~~ ))
          image_repo: (( ~~ ))
        os-coreos-alicloud:
          <<: (( merge ))
          tag: (( valid( os-coreos-alicloud.branch ) -or valid( os-coreos-alicloud.commit ) ? ~~ :"0.10.0" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/os-coreos-alicloud/charts/os-coreos-alicloud
          image_tag: (( valid( os-coreos-alicloud.tag ) ? os-coreos-alicloud.tag :~~ ))
          image_repo: (( ~~ ))
        os-suse-jeos:
          <<: (( merge ))
          tag: (( valid( os-suse-jeos.branch ) -or valid( os-suse-jeos.commit ) ? ~~ :"0.10.0" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/os-suse-jeos/charts/os-suse-jeos
          image_tag: (( valid( os-suse-jeos.tag ) ? os-suse-jeos.tag :~~ ))
          image_repo: (( ~~ ))
        provider-alicloud:
          <<: (( merge ))
          tag: (( valid( provider-alicloud.branch ) -or valid( provider-alicloud.commit ) ? ~~ :"0.10.0" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/provider-alicloud/charts/provider-alicloud
          image_tag: (( valid( provider-alicloud.tag ) ? provider-alicloud.tag :~~ ))
          image_repo: (( ~~ ))
        provider-aws:
          <<: (( merge ))
          tag: (( valid( provider-aws.branch ) -or valid( provider-aws.commit ) ? ~~ :"0.10.0" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/provider-aws/charts/provider-aws
          image_tag: (( valid( provider-aws.tag ) ? provider-aws.tag :~~ ))
          image_repo: (( ~~ ))
        provider-gcp:
          <<: (( merge ))
          tag: (( valid( provider-gcp.branch ) -or valid( provider-gcp.commit ) ? ~~ :"0.10.0" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/provider-gcp/charts/provider-gcp
          image_tag: (( valid( provider-gcp.tag ) ? provider-gcp.tag :~~ ))
          image_repo: (( ~~ ))
        provider-azure:
          <<: (( merge ))
          tag: (( valid( provider-azure.branch ) -or valid( provider-azure.commit ) ? ~~ :"0.10.0" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/provider-azure/charts/provider-azure
          image_tag: (( valid( provider-azure.tag ) ? provider-azure.tag :~~ ))
          image_repo: (( ~~ ))
        provider-openstack:
          <<: (( merge ))
          tag: (( valid( provider-openstack.branch ) -or valid( provider-openstack.commit ) ? ~~ :"0.10.0" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/provider-openstack/charts/provider-openstack
          image_tag: (( valid( provider-openstack.tag ) ? provider-openstack.tag :~~ ))
          image_repo: (( ~~ ))
        networking-calico:
          <<: (( merge ))
          tag: (( valid( networking-calico.branch ) -or valid( networking-calico.commit ) ? ~~ :"0.10.0" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/networking-calico/charts/networking-calico
          image_tag: (( valid( networking-calico.tag ) ? networking-calico.tag :~~ ))
          image_repo: (( ~~ ))
    dashboard:
      <<: (( merge ))
      repo: "https://github.com/gardener/dashboard.git"
      # tag: (( valid( branch ) -or valid( commit ) ? ~~ :"1.33.0" ))
      # image_tag: (( valid( tag ) ? tag :~~ ))
      commit: (( valid( branch ) -or valid( tag ) ? ~~ :"c861049ed826421b57baa452ee514510969d1f74" ))
      image_tag: "1.34.0-dev-c861049ed826421b57baa452ee514510969d1f74"
    identity:
      <<: (( merge ))
      repo: (( dashboard.repo ))
      tag: (( valid( branch ) -or valid( commit ) ? ~~ :( dashboard.tag || ~~ ) ))
      branch: (( valid( commit ) ? ~~ :( dashboard.branch || ~~ ) ))
      commit: (( dashboard.commit || ~~ ))
    dns-controller:
      <<: (( merge ))
      tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.6.3" ))
      image_tag: (( valid( tag ) ? tag :~~ ))
      image_repo: (( ~~ ))
      repo: "https://github.com/gardener/external-dns-management.git"
    cert-manager:
      controller:
        <<: (( merge ))
        tag: (( valid( branch ) -or valid( commit ) ? ~~ :helm_tag )) # only used for CRDs
        repo: "https://github.com/jetstack/cert-manager.git"
        helm_repo: "https://charts.jetstack.io"
        helm_tag: "v0.9.1"
      cert-dns-bridge:
        <<: (( merge ))
        tag: (( valid( branch ) -or valid( commit ) ? ~~ :"1.0.0" ))
        image_tag: (( valid( tag ) ? tag :~~ ))
        image_repo: (( ~~ ))
        repo: "https://github.com/gardener/certificate-dns-bridge.git"
  iaas: (( merge none // map[ select[stub()|e|-> ( ! defined( e.mode ) ) -or ( e.mode != "inactive" ) ] |idx,v|-> v { "mode" = v.mode || "seed" } ] ))
  etcd:
    <<: (( merge ))
    backup:
      <<: (( merge ))
      type: (( .backup_type_mapping[iaas[0].type] ))
      region: (( iaas[0].region ))
      credentials: (( iaas[0].credentials ))
  dashboard: (( ~~ ))
  identity:
  gardener: (( ~~ ))
  cert-manager:
    <<: (( merge ))
    server: (( merge none // valid( stub() ) ? ( type( stub() ) == "map" ? stub() :{ "url" = stub() } ) :{"url" = "self-signed"} ))
  dns:
    <<: (( merge ))
    type: (( .dns_type_mapping[iaas[0].type] ))
    credentials: (( iaas[0].credentials ))

dns_type_mapping:
  <<: (( &temporary ))
  gcp: google-clouddns
  aws: aws-route53
  azure: azure-dns
  openstack: openstack-designate

backup_type_mapping:
  <<: (( &temporary ))
  gcp: gcs
  aws: s3
  azure: abs
  openstack: swift


######################
##### VALIDATION #####
######################

validation:
  <<: (( &temporary ))

  ### AUXILIARY FUNCTIONS ###
  return_true: (( |x|-> true )) # dummy validator that never fails
  instantiate_validator: (( |values,validator|-> *validator )) # instantiates a validator with given values
  email_regex: "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*@[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)+$" # a simple email regex
  flatten: (( |l|-> sum[l|[]|s,e|-> s e.[*]] )) # flattens a list of lists to a list of elements
  length_validator: (( |x,l|-> [length( x ) <= l, x, "exceeded maximum allowed length (" l "):" " " x] )) # returns true if the length of x is equals or lesser than l

  ### VALIDATOR DEFINITIONS ###
  types:
    iaas:
      gcp:
        credentials:
          - mapfield
          - serviceaccount.json
        config:
          - ["mapfield", "region"]
          - ["mapfield", "zones", ["list"]]
        networks:
          - ["mapfield", "workers", ["list", ["cidr"]]]
      aws:
        credentials:
          - and
          - ["mapfield", "accessKeyID"]
          - ["mapfield", "secretAccessKey"]
        config:
          - ["mapfield", "region"]
          - ["mapfield", "zones", ["list"]]
        networks:
          - ["mapfield", "internal", ["list", ["cidr"]]]
          - ["mapfield", "public", ["list", ["cidr"]]]
          - ["mapfield", "vpc", ["or", ["mapfield", "id"], ["mapfield", "cidr", ["cidr"]]]]
      azure:
        credentials:
          - and
          - ["mapfield", "clientID"]
          - ["mapfield", "clientSecret"]
          - ["mapfield", "subscriptionID"]
          - ["mapfield", "tenantID"]
        config:
          - ["mapfield", "region"]
        networks:
          - ["mapfield", "workers", ["cidr"]]
          - ["mapfield", "vnet", ["or", ["mapfield", "name"], ["mapfield", "cidr", ["cidr"]]]]
      openstack:
        credentials:
          - and
          - ["mapfield", "domainName"]
          - ["mapfield", "tenantName"]
          - ["mapfield", "username"]
          - ["mapfield", "password"]
          - ["mapfield", "authURL"]
        config:
          - - mapfield
            - floatingPools
            - - list
              - ["mapfield", "name"]
          - - mapfield
            - machineImages
            - - list
              - - and
                - ["mapfield", "name"]
                - ["mapfield", "version"]
          - - mapfield
            - loadBalancerProviders
            - - list
              - ["mapfield", "name"]
          - - mapfield
            - machineTypes
            - - list
              - - and
                - ["mapfield", "name"]
                - ["mapfield", "cpu"]
                - ["mapfield", "gpu"]
                - ["mapfield", "memory"]
                - ["mapfield", "usable"]
                - ["mapfield", "volumeType"]
                - ["mapfield", "volumeSize"]
          - - optionalfield
            - extensionConfig
            - - mapfield
              - machineImages
              - - list
                - - and
                  - ["mapfield", "name"]
                  - ["mapfield", "version"]
                  - - mapfield
                    - cloudProfiles
                    - - list
                      - - and
                        - ["mapfield", "image"]
                        - ["mapfield", "name"]
          - (( |e|-> [length( validation.openstack_extensionConfigs ) == 1, "valid", "if there are entries in 'landscape.iaas' with type 'openstack', exactly one of these entries must contain the 'extensionConfig' configuration"] ))
          - ["mapfield", "region"]
          - ["mapfield", "zones", ["list"]]
        networks:
          - ["mapfield", "workers", ["list", ["cidr"]]]
    etcd_backup:
      gcs:
        credentials: (( iaas.gcp.credentials ))
        config: (( return_true ))
      s3:
        credentials: (( iaas.aws.credentials ))
        config: (( return_true ))
      abs:
        credentials: (( iaas.azure.credentials ))
        config: ["mapfield", "resourceGroup"]
      swift:
        credentials: (( iaas.openstack.credentials ))
        config: (( return_true ))
    dns:
      google-clouddns:
        credentials: (( iaas.gcp.credentials ))
        config: (( return_true ))
      aws-route53:
        credentials: (( iaas.aws.credentials ))
        config: (( return_true ))
      azure-dns:
        credentials: (( iaas.azure.credentials ))
        config: (( return_true ))
      openstack-designate:
        credentials:
          - <<: (( iaas.openstack.credentials ))
          - ["mapfield", "region"]
        config: (( return_true ))
  iaas_entry_validators:
    basic:
      - <<: (( &template ))
      - and
      - ["mapfield", "name"]
      - ["mapfield", "type", ["valueset", (( keys( types.iaas ) ))]]
      - ["mapfield", "mode", ["valueset", ["seed", "profile", "cloudprofile", "soil"]]]
      - - optionalfield
        - credentials
        - (( types.iaas[values.type].credentials ))
      - <<: (( types.iaas[values.type].config ))
    initial_seed:
      - <<: (( &template ))
      - and
      - ["mapfield", "mode", ["valueset", ["seed", "soil"]]]
      - - mapfield
        - credentials
        - (( types.iaas[values.type].credentials ))
    seed:
      - <<: (( &template ))
      - and
      - - mapfield
        - credentials
        - (( types.iaas[values.type].credentials ))
      - - mapfield
        - cluster
        - - and
          - ["mapfield", "kubeconfig"]
          - - mapfield
            - networks
            - (( validation.networks ))
    cloudprofile: (( &template( return_true ) ))
    shooted_seed:
      - <<: (( &template ))
      - and
      - - mapfield
        - name
        - - (( validation.length_validator ))
          - 10
      - - mapfield
        - mode
        - ["valueset", ["seed", "soil"]]
      - - mapfield
        - credentials
        - (( types.iaas[values.type].credentials ))
      - - mapfield
        - cluster
        - - mapfield
          - networks
          - (( validation.networks types.iaas[values.type].networks ))
  dashboard_validator: (( |db|-> [! defined( db.frontendConfig.seedCandidateDeterminationStrategy ), "valid", "the 'frontendConfig.seedCandidateDeterminationStrategy' value for the dashboard is derived from the Gardener config and cannot be set here - set 'landscape.gardener.seedCandidateDeterminationStrategy' instead"] ))
  gardener_validator: ["optionalfield", "seedCandidateDeterminationStrategy", ["valueset", ["SameRegion", "MinimalDistance"]]]
  networks:
    - and
    - ["mapfield", "nodes", "cidr"]
    - ["mapfield", "pods", "cidr"]
    - ["mapfield", "services", "cidr"]
  cert-manager_validators:
    basic:
      - and
      - - optionalfield
        - email
        - - match
          - (( validation.email_regex ))
      - - mapfield
        - server
        - - and
          - - mapfield
            - url
            - - or
              - ["valueset", ["self-signed", "staging", "live"]]
              - dnsdomain
          - - optionalfield
            - ca
            - ["and", [(( cert-manager_validators.selfsigned )), (( landscape.cert-manager.server.url ))], [(( cert-manager_validators.acme )), (( landscape.cert-manager.server.url ))]]
    selfsigned: (( |ca,url|-> [url == "self-signed" ? valid( ca.crt ) -and valid( ca.key ) :true, "valid", "if 'landscape.cert-manager.server.url' is set to 'self-signed', you should either specify a CA with key ('server.ca.crt' and 'server.ca.key' set), or no CA at all ('server.ca' node not present)"] ))
    acme: (( |ca,url|-> [url != "self-signed" ? valid( ca.crt ) -and ( ! defined( ca.key ) ) :true, "if 'landscape.cert-manager.server.url' is not set to 'self-signed', you should either specify a CA without key ('server.ca.crt' set, no 'server.ca.key'), or the 'server.ca' node should not be present at all"] ))
    email: (( |ca,id|-> [valid( ca.email ) -or valid( id.users[0].email ), "either 'landscape.cert-manager.email' or 'landscape.identity.users[0].email' needs to be set"] ))
  openstack_extensionConfigs: (( (select[landscape.iaas|elem|-> elem.type == "openstack" -and valid( elem.extensionConfig )]).[*].extensionConfig ))



  ### VALIDATIONS ###
  # structure resembles structure of landscape where possible
  ##### landscape.name
  name: (( validate( landscape.name, "dnslabel" ) ))
  ##### landscape.domain
  domain: (( validate( landscape.domain, "dnsdomain" ) ))
  ##### landscape.cluster.networks
  cluster:
    networks: (( validate( landscape.clusters[0].networks, validation.networks ) ))
  ##### landscape.iaas
  iaas:
    basic: (( map[landscape.iaas|entry|-> validate( entry, validation.instantiate_validator(entry, iaas_entry_validators.basic) )] ))
    initial_seed: (( validate( landscape.iaas[0], validation.instantiate_validator(landscape.iaas[0], iaas_entry_validators.initial_seed) ) ))
    seed_soil: (( map[select[landscape.iaas.[1..]|elem|-> elem.mode == "seed" -or elem.mode == "soil"]|id,entry|-> validate( entry, validation.instantiate_validator(entry, iaas_entry_validators.seed) )] ))
    cloudprofile: (( map[select[landscape.iaas.[1..]|elem|-> elem.mode == "profile" -or elem.mode == "cloudprofile"]|id,entry|-> validate( entry, validation.instantiate_validator(entry, iaas_entry_validators.cloudprofile) )] ))
    shooted_seed: (( map[validation.flatten( select[select[landscape.iaas|elem|-> elem.mode == "seed" -or elem.mode == "soil"]|elem|-> valid( elem.seeds )].[*].seeds ) |entry|-> validate( entry, validation.instantiate_validator(entry, iaas_entry_validators.basic), validation.instantiate_validator(entry, iaas_entry_validators.shooted_seed) )] ))
  ##### landscape.etcd
  etcd:
    backup:
      type: (( validate( landscape.etcd.backup, ["mapfield", "type", ["valueset", keys( types.etcd_backup )]] ) ))
      region: (( validate( landscape.etcd.backup, ["mapfield", "region"] ) ))
      provider_config: (( validate( landscape.etcd.backup, types.etcd_backup[landscape.etcd.backup.type].config ) ))
      credentials: (( validate( landscape.etcd.backup, ["mapfield", "credentials", types.etcd_backup[landscape.etcd.backup.type].credentials] ) ))
  ##### landscape.dns
  dns:
    type: (( validate( landscape.dns, ["mapfield", "type", ["valueset", keys( types.dns )]] ) ))
    hostedZoneIDs: (( validate( landscape.dns, ["optionalfield", "hostedZoneIDs", ["map", ["valueset", ["include", "exclude"]], "list"]] ) ))
    provider_config: (( validate( landscape.dns, types.dns[landscape.dns.type].config ) ))
    credentials: (( validate( landscape.dns, ["mapfield", "credentials", types.dns[landscape.dns.type].credentials] ) ))
  ##### landscape.gardener
  gardener: (( defined( landscape.gardener ) ? validate( landscape.gardener, validation.gardener_validator ) :~~ ))
  ##### landscape.dashboard
  dashboard: (( defined( landscape.dashboard ) ? validate( landscape.dashboard, validation.dashboard_validator ) :~~ ))
  ##### landscape.certmanager
  cert-manager: (( validate( landscape.cert-manager, validation.cert-manager_validators.basic, [validation.cert-manager_validators.email, landscape.identity] ) ))
  ##### landscape.identity TODO
  identity:
    userspec:
      - and
      - - mapfield
        - email
        - - match
          - (( validation.email_regex ))
      - - mapfield
        - username
      - - or
        - ["mapfield", "password"]
        - ["mapfield", "hash"]
    connectorspec:
      - and
      - ["mapfield", "type"]
      - ["mapfield", "id"]
      - ["mapfield", "name"]
    identityspec: (( |id|-> [valid( id.users || id.connectors ), "valid", "identity config needs to contain either 'users' or 'connectors' (or both)"] ))
    validator: (( validate( landscape.identity, identityspec, ["optionalfield", "users", ["list", identity.userspec]], ["optionalfield", "connectors", ["list", identity.connectorspec]] ) ))
