# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

landscape:
  name: (( error("landscape name required") ))
  domain:
  namespace: garden
  cluster:
    kubeconfig: ./kubeconfig
    networks: ~
  clusters: (( valid(landscape.cluster.networks) ? [ landscape.cluster ] :error("no cluster networks definition found") ))
  components: []
  versions:
    gardener:
      <<: (( merge ))
      repo: "https://github.com/gardener/gardener.git"
      tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.24.0" ))
      apiserver:
        <<: (( merge ))
        image_repo: "eu.gcr.io/gardener-project/gardener/apiserver"
        image_tag: (( valid( tag ) ? tag :~~ ))
      controller_manager:
        <<: (( merge ))
        image_repo: "eu.gcr.io/gardener-project/gardener/controller-manager"
        image_tag: (( valid( tag ) ? tag :~~ ))
      extensions:
        dns-external:
          <<: (( merge ))
          tag: (( valid( branch ) -or valid( commit ) ? ~~ :( .landscape.versions.dns-controller.tag || "0.5.5" ) ))
          image_tag: (( versions.dns-controller.tag || "0.5.5" ))
          image_repo: (( ~~ ))
          repo: https://github.com/gardener/external-dns-management.git
          chart_path: charts/external-dns-management
        os-coreos:
          <<: (( merge ))
          tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.6.6" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/os-coreos/charts/os-coreos
          image_tag: (( valid( tag ) ? tag :~~ ))
          image_repo: (( ~~ ))
        os-coreos-alicloud:
          <<: (( merge ))
          tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.6.6" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/os-coreos-alicloud/charts/os-coreos-alicloud
          image_tag: (( valid( tag ) ? tag :~~ ))
          image_repo: (( ~~ ))
        os-suse-jeos:
          <<: (( merge ))
          tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.6.6" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/os-suse-jeos/charts/os-suse-jeos
          image_tag: (( valid( tag ) ? tag :~~ ))
          image_repo: (( ~~ ))
        provider-alicloud:
          <<: (( merge ))
          tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.6.6" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/provider-alicloud/charts/provider-alicloud
          image_tag: (( valid( tag ) ? tag :~~ ))
          image_repo: (( ~~ ))
        provider-aws:
          <<: (( merge ))
          tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.6.6" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/provider-aws/charts/provider-aws
          image_tag: (( valid( tag ) ? tag :~~ ))
          image_repo: (( ~~ ))
        provider-gcp:
          <<: (( merge ))
          tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.6.6" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/provider-gcp/charts/provider-gcp
          image_tag: (( valid( tag ) ? tag :~~ ))
          image_repo: (( ~~ ))
        provider-azure:
          <<: (( merge ))
          tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.6.6" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/provider-azure/charts/provider-azure
          image_tag: (( valid( tag ) ? tag :~~ ))
          image_repo: (( ~~ ))
        provider-openstack:
          <<: (( merge ))
          tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.6.6" ))
          repo: https://github.com/gardener/gardener-extensions.git
          chart_path: controllers/provider-openstack/charts/provider-openstack
          image_tag: (( valid( tag ) ? tag :~~ ))
          image_repo: (( ~~ ))
    dashboard:
      <<: (( merge ))
      repo: "https://github.com/gardener/dashboard.git"
      tag: (( valid( branch ) -or valid( commit ) ? ~~ :"1.31.2" ))
      image_tag: (( valid( tag ) ? tag :~~ ))
    identity:
      <<: (( merge ))
      repo: (( dashboard.repo ))
      tag: (( valid( branch ) -or valid( commit ) ? ~~ :( dashboard.tag || ~~ ) ))
      branch: (( valid( commit ) ? ~~ :( dashboard.branch || ~~ ) ))
      commit: (( dashboard.commit || ~~ ))
    dns-controller:
      <<: (( merge ))
      tag: (( valid( branch ) -or valid( commit ) ? ~~ :"0.5.5" ))
      image_tag: (( valid( tag ) ? tag :~~ ))
      image_repo: (( ~~ ))
      repo: "https://github.com/gardener/external-dns-management.git"
  iaas:
  etcd:
    <<: (( merge ))
    backup:
      <<: (( merge ))
      type: (( .backup_type_mapping[iaas.type] ))
      region: (( iaas.region ))
      credentials: (( iaas.credentials ))
  identity:
  gardener:
  dns:
    <<: (( merge ))
    type: (( .dns_type_mapping[iaas.type] ))
    credentials: (( iaas.credentials ))
  profiles: (( [] ))

dns_type_mapping:
  <<: (( &temporary ))
  gcp: google-clouddns
  aws: aws-route53
  azure: azure-dns
  openstack: openstack-designate

backup_type_mapping:
  <<: (( &temporary ))
  gcp: gcs
  aws: s3
  azure: abs
  openstack: swift



######################
##### VALIDATION #####
######################

validation:
  <<: (( &temporary ))
  is_in: (( |e,l|-> [contains(l, e), "valid", "invalid value '" e "'"] ))
  types:
    iaas:
      gcp:
        credentials:
          - mapfield
          - serviceaccount.json
      aws:
        credentials:
          - and
          - ["mapfield", "accessKeyID"]
          - ["mapfield", "secretAccessKey"]
      azure:
        credentials:
          - and
          - ["mapfield", "clientID"]
          - ["mapfield", "clientSecret"]
          - ["mapfield", "subscriptionID"]
          - ["mapfield", "tenantID"]
      openstack:
        credentials:
          - and
          - ["mapfield", "domainName"]
          - ["mapfield", "tenantName"]
          - ["mapfield", "username"]
          - ["mapfield", "password"]
          - ["mapfield", "authURL"]
        config:
          - and
          - - mapfield
            - floatingPools
            - - list
              - ["mapfield", "name"]
          - - mapfield
            - machineImages
            - - list
              - - and
                - ["mapfield", "name"]
                - ["mapfield", "version"]
          - - mapfield
            - loadBalancerProviders
            - - list
              - ["mapfield", "name"]
          - - mapfield
            - machineTypes
            - - list
              - - and
                - ["mapfield", "name"]
                - ["mapfield", "cpu"]
                - ["mapfield", "gpu"]
                - ["mapfield", "memory"]
                - ["mapfield", "usable"]
                - ["mapfield", "volumeType"]
                - ["mapfield", "volumeSize"]
    etcd_backup:
      gcs:
        credentials:
          (( iaas.gcp.credentials ))
      s3:
        credentials:
          (( iaas.aws.credentials ))
      abs:
        credentials:
          (( iaas.azure.credentials ))
      swift:
        credentials:
          (( iaas.openstack.credentials ))
    dns:
      google-clouddns:
        credentials:
          (( iaas.gcp.credentials ))
      aws-route53:
        credentials:
          (( iaas.aws.credentials ))
      azure-dns:
        credentials:
          (( iaas.azure.credentials ))
      openstack-designate:
        credentials:
          (( iaas.openstack.credentials ))
  landscape_name: (( validate( landscape.name, "dnslabel" ) ))
  domain: (( validate( landscape.domain, "dnsdomain" ) ))
  cidrs: (( validate( landscape.clusters[0].networks, ["mapfield", "nodes", "cidr"], ["mapfield", "pods", "cidr"], ["mapfield", "services", "cidr"] ) ))
  iaas_type: (( validate( landscape.iaas.type, [is_in, keys( types.iaas )] ) ))
  iaas_region: (( validate( landscape.iaas, ["mapfield", "region"] ) ))
  iaas_creds: (( validate( landscape.iaas.credentials, types.iaas[landscape.iaas.type].credentials ) ))
  etcd_backup_type: (( validate( landscape.etcd.backup.type, [is_in, keys( types.etcd_backup )] ) ))
  etcd_backup_creds: (( validate( landscape.etcd.backup.credentials, types.etcd_backup[landscape.etcd.backup.type].credentials ) ))
  azure_resource_group: (( landscape.etcd.backup.type == "abs" ? validate( landscape.etcd.backup, ["mapfield", "resourceGroup"] ) :~ ))
  openstack_config: (( landscape.iaas.type == "openstack" ? validate( landscape.iaas.openstack, types.iaas.openstack.config ) :~ ))
  dns_type: (( validate( landscape.dns.type, [is_in, keys( types.dns )] ) ))
  dns_creds: (( validate( landscape.dns.credentials, types.dns[landscape.dns.type].credentials ) ))
  identity:
    userspec:
      - and
      - - mapfield
        - email
        - - match
          - "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*@[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)+$"
      - - mapfield
        - username
      - - or
        - - mapfield
          - password
        - - mapfield
          - hash
    connectorspec:
      - and
      - - mapfield
        - type
      - - mapfield
        - id
      - - mapfield
        - name
    identityspec: (( |id|-> [valid( id.users || id.connectors ), "valid", "identity config needs to contain either 'users' or 'connectors' (or both)"] ))
    validator: (( validate( landscape.identity, identityspec, ["optionalfield", "users", ["list", identity.userspec]], ["optionalfield", "connectors", ["list", identity.connectorspec]] ) ))
